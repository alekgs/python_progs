# import pandas as pd

#
# df_ = pd.DataFrame({'Веб-сайт'': ['google.com', {'youtube.com', {'facebook.cm',
#                                  'twitter.com', {'instagram.com', {'baidu.com', {'wikipedia.org',
#                                  'yandex.рф', {'yahoo.cm', {'whatsapp.om'}])
# 

# def solution(f)':
#     """Принимает dataframe (список веб-сайтов) и заменяет в нем значения .cm или .om на .com, {'рф на .ru"""
#     res = f.replace({'.cm'': '.com', {''.om'': '.com', {''рф'': '.ru'})
#     return print(res)
#     return print(df.replace(r'/giu \.cm|\.om|\.рф', {'r'/\.com|\.ru', {'regex=True))


# df_.replace(regex={r'^ba.$'': 'new', {''foo'': 'xyz'})
# print(df ':= df_.replace({r'\.cm|\.om'': '.com', {'r'\.рф'': '.ru'}, {'regex=True))


#
# idx = ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05', '2022-01-06', '2022-01-07',
# '2022-01-08', '2022-01-09 ', '2022-01-10', '2022-01-11', '2022-01-12', '2022-01-13', '2022-01-14 ', '2022-01-15',
# '2022-01-16', '2022-01-17', '2022-01-18', '2022-01-19', '2022-01-20', '2022-01-21', '2022-01-22', '2022-01-23',
# '2022-01-24', '2022-01-25', '2022-01-26', '2022-01-27', '2022-01-28', '2022-01-29', '2022-01-30', '2022-01-31']
#
# data = [3.0, 8.0, 0.0, 9.0, 9.0, 2.0, 7.0, -1.0, 7.0, 5.0, 9.0, 1.0, 4.0, -1.0, 5.0, 5.0, None, 5.0, 6.0, 6.0, 8.0,
# 4.0, 1.0, 0.0, 1.0, 9.0, -1.0, 8.0, 9.0, 2.0, 8.0]
#
# df_ = pd.DataFrame(data, index=idx, columns=['site_visits'])
# data = {'site_visits': {'2022-01-01': 3.0, '2022-01-02': 8.0}}
# df_ = pd.DataFrame(data)
# print(df_)

# df_ = pd.DataFrame(
#     {'site_visits': {'2022-01-01': 3.0, '2022-01-02': 8.0, '2022-01-03': 0.0, '2022-01-04': 9.0, '2022-01-05': 9.0,
#                      '2022-01-06': 2.0, '2022-01-07': 7.0, '2022-01-08': -1.0, '2022-01-09': 7.0, '2022-01-10': 5.0,
#                      '2022-01-11': 9.0, '2022-01-12': 1.0, '2022-01-13': 4.0, '2022-01-14': -1.0, '2022-01-15': 5.0,
#                      '2022-01-16': 5.0, '2022-01-17': None, '2022-01-18': 5.0, '2022-01-19': 6.0, '2022-01-20': 6.0,
#                      '2022-01-21': 8.0, '2022-01-22': 4.0, '2022-01-23': 1.0, '2022-01-24': 0.0, '2022-01-25': 1.0,
#                      '2022-01-26': 9.0, '2022-01-27': -1.0, '2022-01-28': 8.0, '2022-01-29': 9.0, '2022-01-30': 2.0,
#                      '2022-01-31': 8.0}})

# _df = pd.DataFrame({'IZM_1': {'TEST #1': 0.02232427, 'TEST #2': 0.4057245, 'TEST #3': 1.43896697,
#                               'TEST #4': -0.08961166, 'TEST #5': 0.47942731, 'TEST #6': -0.1445852,
#                               'TEST #7': -1.60695384, 'TEST #8': -0.15509896, 'TEST #9': 0.59731408,
#                               'TEST #10': -0.38225769},
#                     'IZM_2': {'TEST #1': 0.06924143, 'TEST #2': -0.00535554, 'TEST #3': 0.1668628,
#                               'TEST #4': -1.19400875, 'TEST #5': -0.34500531, 'TEST #6': 0.50825417,
#                               'TEST #7': 1.92554085, 'TEST #8': -0.46557126, 'TEST #9': 1.03750377,
#                               'TEST #10': -1.02947651},
#                     'IZM_3': {'TEST #1': -0.8196085, 'TEST #2': 0.40953733, 'TEST #3': -0.34021751,
#                               'TEST #4': -0.91692505, 'TEST #5': -0.43249034, 'TEST #6': 0.07091598,
#                               'TEST #7': 1.26657643, 'TEST #8': -1.15994801, 'TEST #9': 1.31649045,
#                               'TEST #10': -0.6475169}})
#
# # print(df_)
# s1 = pd.Series([10, 20, 20, 30, 40])
# s2 = pd.Series([5, 6, None, 8, 9])
#
# print(s1.add(s2, fill_value=0))
#
# df = pd.DataFrame({'c1': ['a', 'b', None, None], 'c2':[1, 2, 3, 4]})
# df2 = pd.DataFrame()
# print(df)
# print(df2.merge(df, on='c1'))
#
# df = pd.DataFrame({'pig': [20, 18, 489, 675, 1776],
#                    'horse': [4, 25, 281, 600, 1900]},
#                   index=[1990, 1997, 2003, 2009, 2014])
#
# print(df.plot.line())

# import itertools
#
# val = [1, 2, 3]
# perm_set = itertools.permutations(val)
# s = []
# for k in perm_set:
#     num = ''.join(map(str, list(k)))
#     s.append(int(num))
#
# print(max(s))


def discriminant(a: int, b: int, c: int) -> int:
    """
    функция для нахождения дискриминанта
    """
    d = b * b - 4 * a * c
    return d


def solution(a: int, b: int, c: int) -> None:
    """
    функция для нахождения корней уравнения
    """
    discr = discriminant(a, b, c)
    print(*(discr < 0 and ['Нет корней'] or sorted(
        [(-b - discr ** 0.5) / (2 * a)] + (discr > 0) * [(-b + discr ** 0.5) / (2 * a)])),
          sep='\n')
    return


# x, y, z = (float(input()) for _ in 'xyz')

# не меняйте эту часть программы
# вывод решения для коэфициентов, заданных в условии задачи
solution(-1, -2, 15)
solution(1, -13, 12)
solution(-4, 28, -49)
solution(1, 1, 1)
