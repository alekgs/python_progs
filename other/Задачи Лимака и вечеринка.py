"""
    В последний день уходящего 2016 года Лимак собирается принять участие в соревновании по спортивному
программированию. Соревнование начнётся в 20:00 и будет продолжаться четыре часа, то есть ровно до полуночи.
Участникам будет предложено n задач, упорядоченных по возрастанию сложности, то есть задача 1 будет самой лёгкой,
а задача номер n — самой сложной. Лимак знает, что ему потребуется 5·i минут на решение i-й задачи.
    Друзья Лимака планирую устроить роскошную новогоднюю вечеринку и Лимак хочет прибыть в полночь или ранее.
    Он знает, что ему требуется ровно k минут, чтобы добрать до места проведения вечеринки от своего дома,
    где он собирается участвовать в соревновании.
    Сколько максимум задач может успеть решить Лимак, так чтобы не опоздать на новогоднюю вечеринку?

Входные данные
В первой строке входных данных записаны два целых числа n и k — количество задач в
соревновании и количество минут, за которое Лимак доберётся от дома до места проведения вечеринки.

Выходные данные
    Выведите одно целое число, равное максимальному количеству задач, которое может решить Лимак, так чтобы прибыть на
новогоднюю вечеринку ровно в полночь или раньше.
"""

# import time
# start_time = time.time()

n, k = map(int, input().split())
i = 0                    # счётчик выполненных задач
time_n = 240 - k         # время на решение задач
if time_n > 5:           # если оставшееся время < 5, то обходим цикл и сразу выдаём 0
    while time_n > 0:
        i += 1
        time_n -= i * 5
        if n == i:       # если кол-во решенных задач равно максимальному, то выходим из цикла
            break
    if time_n < 0:       # если время отрицательно, значит нужно вычесть одну задачу, чтобы успеть ко времени
        i -= 1
print(i)

# print("--- %s seconds ---" % (time.time() - start_time))
"""
Арифметическая прогрессия, вернее, сумма членов АП для этой задачи
s = 5 * ((n ** 2 + n) // 2 )
Максимальное количество решенных задач (на каждую тратится 5 мин) = 9, 
т.к. время ограничено 4 часами (240 мин)

При 10 задачах время будет = 275 мин
При 9 - 225 мин
240 - 225 = 15 мин на дорогу при 9 решенных задачах 
составим список из 9 элементов (времени задач)
[5, 15, 30, 50, 75, 105, 140, 180, 225]
"""

"""Решение от Александра Глозмана Версия №1. Аналитическое решение. Я был первым, кто выложил аналитическое решение 
этой задачи год назад. Решение сопровождалось подробным разбором. Но недавно автор переместил эту и ещё несколько 
задач и в результате все решения, включая моё, потерялись :(. Я их нигде не сохранил и теперь приходится всё выводить 
заново, что не так просто, потому что в следующей задаче придется уже решать кубическое уравнение. Составляем 
неравенство согласно условию задачи: 5∗1+5∗2+...+5∗t≤4∗60−k5∗1+5∗2+...+5∗t≤4∗60−k где tt - это количество решенных 
задач. Слева можно вынести множитель 5 за скобки и получится сумма чисел натурального ряда на интервале [1, 
t]. Это сумма ариф. прогрессии с разностью 1, для неё известна сокращенная формула: t(t+1)22t(t+1)​. 
Приведенное неравенство будет выглядеть так: 5∗t(t+1)2≤4∗60−k5∗2t(t+1)​≤4∗60−k 
Теперь раскроем скобки и приведем неравенство к квадратному полиному: 
t2+t−2∗(4∗60−k)5≤0t2+t−52∗(4∗60−k)​≤0 
Квадратное уравение слева имеет два корня, но только один 
из них положительный: tpositive=−1+1+8∗(4∗60−k)2 tpositive​=2−1+1+8∗(4∗60−k) ​​ 

Причем это будет наибольшее значение  tt при котором выполняется наше неравенство (представьте себе параболу с 
ветвями направленными вверх, отрицательная область значений параболы лежит между корнями). Для завершения решения, 
остается лишь учесть тот факт, что общее кол-во задач не может превысить n. 
"""

# n, k = map(int, input().split())
# print(min(n, int(((1 + 8 * (4 * 60 - k) / 5) ** .5 - 1) / 2)))

# Способ от Романа Ковкова
"""
n, k = map(int, input().split())
c = 0
while (k <= 240) * (c <= n):
    c += 1
    k += c * 5
print(c - 1)
"""

# Способ от Lilija
"""
n, k = map(int, input().split())
i = 0
while 4 * 60 - k >= 0 and n >= i:
    i += 1
    k = k + i * 5
print(i - 1)
"""
# Способ от Михаила Комелина
"""
n, k = map(int, input().split())
i, k = 0, (240 - k) // 5
while i < k and i < n:
    i = i + 1
    k = k - i
print(i)
"""