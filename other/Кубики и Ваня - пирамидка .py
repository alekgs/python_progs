"""
    Ване на день рождения подарили n кубиков. Он с друзьями решил построить из них пирамиду. Ваня хочет построить
пирамиду следующим образом: на верхушке пирамиды должен находиться 1 кубик, на втором уровне — 3 кубика,
на третьем — 6 кубиков, и так далее. Таким образом, на i-м уровне пирамиды должно располагаться
1 + 2 + ... + (i-1) + i кубиков.
    Ваня хочет узнать, пирамиду какой максимальной высоты он может создать с использованием имеющихся кубиков.

    Входные данные
В первой строке записано целое число n (1 <= n <= 10000) — количество кубиков, подаренных Ване.

    Выходные данные
Выведите единственной строкой максимально возможную высоту пирамиды.
"""
# import time
# start_time = time.time()
# print("--- %s seconds ---" % (time.time() - start_time))

n = int(input())        # количество подаренных кубиков
i = 0                   # счётчик количества слоев
s = 0                   # счётчик суммы кубиков в слоях
while s + i + 1 <= n:   # пока еще хватает кубиков, чтобы построить следующий этаж
    i += 1              # увеличиваем количество слоев
    s += i              # находим сумму кубиков
    n -= s              # уменьшаем кол-во подаренных кубиков
print(i)

# Решение Александра Глозмана
"""
В полной пирамиде высотой hh имеется n = (h + 1) ** 3 /6 кубиков. 
Откуда следует -  h = корень кубический (6 * n - 1)
Чтобы проверить есть ли погрешность в значении высоты округленной до меньшего целого, 
мы  округляем ее значение вверх и подставляем в формулу n = (h + 1) ** 3 /6.  
Если округленная вверх высота дает число кубиков, совпадающее с n, значит вещественное значение высоты 
нужно округлять вверх. 

def num_cubes(h):
    return h * (h + 1) * (h + 2) // 6

def approx_height(n):
    return (6 * n) ** (1/3) - 1

n = int(input())
h = int(approx_height(n))
print(h + (num_cubes(h + 1) == n))
"""