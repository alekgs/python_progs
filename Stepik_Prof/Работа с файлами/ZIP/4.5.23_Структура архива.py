"""
Структура архива
Вам доступен архив desktop.zip, содержащий различные папки и файлы. Напишите программу,
которая выводит его файловую структуру и объем каждого файла.

Формат входных данных
На вход программе ничего не подается.

Формат выходных данных
Программа должна вывести файловую структуру архива desktop.zip и объем каждого файла в
несжатом виде. Так как архив имеет собственную иерархию папок, каждый уровень вложенности должен быть выделен двумя
пробелами.

Примечание 1.
Вывод на примере архива test.zip из конспекта:
test
  Картинки
    1.jpg 88 KB
    avatar.png 19 KB
    certificate.png 43 KB
    py.png 33 KB
    World_Time_Zones_Map.png 2 MB
    Снимок экрана.png 11 KB
  Неравенства.djvu 5 MB
  Программы
    image_util.py 5 KB
    sort.py 61 B
  Разные файлы
    astros.json 505 B

Примечание 2. Объем файла записывается в самых крупных единицах измерения с округлением до целых.
Примечание 3. Значения единиц измерения такие же, какие приняты в информатике:
    1 KB = 1024 B
    1 MB = 1024 KB
    1 GB = 1024 MB


Задача решается быстро, если догадаться как название файла связать с пробельным выводом.
Названия файлов через info_list в архиве идут друг за другом, в порядке размещения и вложенности.
Поэтому остается сплитовать название файла по '/' не забывая про '/' на конце,
и далее в принте наш отступ в два пробела умножать на (длину сплитованного списка - 1),
добавив последний элемент этого сплитованного списка (название самого файла).

"""
from zipfile import ZipFile
from math import floor, log


# def hr_size(n, k=0):
#    return (hr_size(n / 1024, k + 1), f"{round(n)} {['B', 'KB', 'MB', 'GB', 'TB'][k]}")[n < 1024]


def get_unit_name(size: int) -> str:
    """Принимает число в байтах и возвращает число в B, KB, MB, GB"""
    unit_names = ('B', 'KB', 'MB', 'GB', 'TB')
    pwr = floor(log(size, 1024))
    return f'{size / 1024 ** pwr:.0f} {unit_names[pwr]}'


with ZipFile('desktop.zip') as zf:
    for f in zf.infolist():
        d = f.filename.strip('/').split('/')
        print(f"{'  ' * (len(d) - 1)}{d[-1]} {'' if f.is_dir() else get_unit_name(f.file_size)}")

