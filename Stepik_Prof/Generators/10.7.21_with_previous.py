"""
Функция with_previous()

Реализуйте генераторную функцию, которая принимает один аргумент:
    iterable — итерируемый объект

Функция должна возвращать генератор, порождающий последовательность кортежей, каждый из которых
содержит очередной элемент итерируемого объекта iterable, а также предшествующий ему элемент:

(<очередной элемент>, <предыдущий элемент>)

Для первого элемента предыдущим считается значение None.

Примечание 1.
Элементы итерируемого объекта в возвращаемом функцией генераторе должны
располагаться в своем исходном порядке.

создать пустой словарь, а затем итерироваться по переданной последовательности,
брать из словаря предыдущее значение, возвращать предыдущее и текущее,
а потом текущее записывать в словарь
"""


def with_previous(iterable):
    prev = None
    for i in iterable:
        yield i, prev
        prev = i


# def with_previous(iterable):
#     d = {}
#     for i, s in enumerate(iterable):
#         yield s, (None, d.get(i - 1))[i != 0]
#         d[i] = s


# Sample Input 1:
numbers = [1, 2, 3, 4, 5]
print(*with_previous(numbers))

# Sample Output 1:
# (1, None) (2, 1) (3, 2) (4, 3) (5, 4)

# Sample Input 2:
iterator = iter('stepik')
print(*with_previous(iterator))

# Sample Output 2:
# ('s', None) ('t', 's') ('e', 't') ('p', 'e') ('i', 'p') ('k', 'i')
