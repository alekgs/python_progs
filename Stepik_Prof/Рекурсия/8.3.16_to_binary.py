"""
Функция to_binary()

Реализуйте функцию to_binary() с использованием рекурсии, которая принимает один аргумент:
    number — неотрицательное целое число

Функция должна возвращать строковое представление числа number в двоичной системе счисления.


Sample Input 1:
print(to_binary(15))

Sample Output 1:
1111

Sample Input 2:
print(to_binary(0))

Sample Output 2:
0

Sample Input 3:
print(to_binary(1))

Sample Output 3:
1

Алгоритм перевода целых десятичных чисел в двоичную систему счисления
1. Последовательно выполнять деление десятичного числа и получаемых целых частных на 2, до тех пор,
пока частное не станет равным 0.
2. Для получения ответа в двоичном коде, необходимо записать, полученные, в результате деления остатки,
в обратном порядке.

while n > 0:
d = str(n % 2) + d
n //= 2
#######################
s = str(n % 2) + s
n //= 2

'0' + функция(число // 2) если .. иначе '1' + функция(число % 2). ну и в базовом случае должно быть не >= 1, а <= 1,
потому что в определенный момент при делении Вы именно этих значений и достигните.
Если написать >= 1, то функция сразу завершает выполнение,
потому что любой число будет соответствовать этому условию, кроме нуля и отрицательных
"""


# def to_binary(number):
#     return f'{number:b}'

def to_binary(number):
    if number <= 1:
        return ('0', '1')[number]
    return to_binary(number // 2) + ('0', '1')[number % 2]


#
# def to_binary(number):
#     if number // 2:
#         return str(to_binary(number // 2)) + str(number % 2)
#    return str(number % 2)


print(to_binary(333))
print(to_binary(123))
print(to_binary(15))
print(to_binary(0))
print(to_binary(1))
