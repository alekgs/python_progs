"""
–ü—Ä–æ—Å—Ç–æ –î–∏–º–∞ üôÇ

–î–∏–º–∞ –ª—é–±–∏—Ç —É—á–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –ª—é–±–∏—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏, –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –µ–≥–æ –æ–≥–æ—Ä—á–∞—é—Ç –¥–≤–æ–π–∫–∏.
–ü–æ—ç—Ç–æ–º—É, –∫–æ–≥–¥–∞ –î–∏–º–∞ –¥–æ–±–∏—Ä–∞–µ—Ç—Å—è –¥–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ, –æ–Ω –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ–¥–Ω—É,
—Ç—Ä–∏ –∏–ª–∏ —á–µ—Ç—ã—Ä–µ —Å—Ç—É–ø–µ–Ω–∏, –Ω–æ –Ω–µ –Ω–∞ –¥–≤–µ.

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ways(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:

    n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (n <= 100)

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å—Å—è –Ω–∞
n-—É—é —Å—Ç—É–ø–µ–Ω—å. –ü—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏, –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ–¥–Ω—É,
—Ç—Ä–∏ –∏–ª–∏ —á–µ—Ç—ã—Ä–µ —Å—Ç—É–ø–µ–Ω–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1.
–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç. –ù–∞ –ø—è—Ç—É—é —Å—Ç—É–ø–µ–Ω—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —á–µ—Ç—ã—Ä—å–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:

    1‚Üí2‚Üí3‚Üí4‚Üí5
    1‚Üí4‚Üí5
    1‚Üí2‚Üí5
    1‚Üí5


Sample Input 1:
print(ways(5))

Sample Output 1:
4

Sample Input 2:
print(ways(1))

Sample Output 2:
1

Sample Input 3:
print(ways(2))

Sample Output 3:
1


    –î–≤–∞ –±–∞–∑–æ–≤—ã—Ö —Å–ª—É—á–∞—è:

    –ú—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ 1 —Å—Ç—É–ø–µ–Ω—å–∫—É, –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–æ–∑—Ä–∞—â–∞–µ–º 1
    –ú—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ (—Å—Ç—É–ø–µ–Ω—å–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º < 1) –≤–æ–∑—Ä–∞—â–∞–µ—Ç 0

    –ò —Ç—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞—è:

    –î–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ —É –Ω–∞—Å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 4 —Å—É–º–º–∞ —Ç—Ä–µ—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    –î–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ —É –Ω–∞—Å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 3 —Å—É–º–º–∞ –¥–≤—É—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    –î–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ —É –Ω–∞—Å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1 –æ–¥–∏–Ω —Ä–µ–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤

"""
from functools import lru_cache
#
#
# @lru_cache
# def ways(n):
#     if n <= 3:
#         return 1
#     if n == 4:
#         return 2
#     else:
#         return ways(n - 1) + ways(n - 3) + ways(n - 4)

@lru_cache()
def ways(n):
    if n > 1:
        return ways(n - 1) + ways(n - 3) + ways(n - 4)
    else:
        return [1, 0][n < 1]

# def ways(n):
#     way = [0, 1, 1, 1, 2] + [0] * (n - 4)
#     for i in range(5, n + 1):
#         way[i] = way[i - 1] + way[i - 3] + way[i - 4]
#     return way[n]


print(ways(500))
