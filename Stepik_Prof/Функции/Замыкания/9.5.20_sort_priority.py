"""
–§—É–Ω–∫—Ü–∏—è sort_priority() üå∂Ô∏è

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sort_priority(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

    values ‚Äî —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    group ‚Äî —Å–ø–∏—Å–æ–∫, –∫–æ—Ä—Ç–µ–∂ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª values, –¥–µ–ª–∞—è –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—É
—á–∏—Å–µ–ª –∏–∑ group, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–π.

–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª values, —É–±—Ä–∞–ª –∏–∑ group –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ values.
–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª group.
–≠–Ω—É–º–µ—Ä–∏—Ä–æ–≤–∞–ª group.
–í —Ü–∏–∫–ª–µ –ø–æ group —É–¥–∞–ª—è–ª –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ values –∏ –≤—Å—Ç–∞–≤–ª—è–ª –µ–≥–æ –∂–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
(–æ–Ω —É –Ω–∞—Å –≤ —ç–Ω—É–º–µ—Ä–∞—Ü–∏–∏) –æ–±—Ä–∞—Ç–Ω–æ –≤ values.
"""


# def sort_priority(values, group):
#     b = set(values).difference(set(group))
#     a = set(group) & set(values)
#     values[:] = sorted(a) + sorted(b)
#     return values


def sort_priority(numbers, group):
    numbers.sort(key=lambda x: (x not in group, x))

# —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º
# def sort_priority(values, group):
#     values.sort()
#
#     def comparison(x):
#         return x not in group
#     values.sort(key=comparison)


numbers = [8, 3, 1, 2, 5, 4, 7, 6]
group = {5, 7, 2, 3}
sort_priority(numbers, group)
print(numbers)
# [2, 3, 5, 7, 1, 4, 6, 8]

numbers = [150, 200, 300, 1000, 50, 20000]
sort_priority(numbers, [300, 100, 200])
print(numbers)
# [200, 300, 50, 150, 1000, 20000]

numbers = [9, 8, 7, 6, 5, 4, 3, 2, 1]
sort_priority(numbers, (300, 100, 200))
print(numbers)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]
