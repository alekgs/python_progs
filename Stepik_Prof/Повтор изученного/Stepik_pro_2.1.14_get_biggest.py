"""
–§—É–Ω–∫—Ü–∏—è get_biggest() üå∂Ô∏èüå∂Ô∏è

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_biggest(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
    numbers ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers.
–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ numbers –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ ‚àí1‚àí1.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∏—Å–µ–ª [1, 2, 3], –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —á–∏—Å–ª–∞:
123,132,213,231,312,321
123,132,213,231,312,321 –ù–∞–∏–±–æ–ª—å—à–∏–º –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è 321321.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é get_biggest(), –Ω–æ –Ω–µ –∫–æ–¥,
–≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.


Sample Input 1:
print(get_biggest([1, 2, 3]))

Sample Output 1:
321

Sample Input 2:
print(get_biggest([61, 228, 9, 3, 11]))

Sample Output 2:
961322811

Sample Input 3:
print(get_biggest([7, 71, 72]))

Sample Output 3:
77271

Sample Input 4:
print(get_biggest([]))

Sample Output 4:
-1


1 –Ω–∞—Ö–æ–¥–∏–º –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ
2 —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —á–µ—Ä–µ–∑ –∫–ª—é—á str(x) * –Ω–∞ 1 –ø—É–Ω–∫—Ç
3 —Å–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
4 –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ —á–∏—Å–ª–æ

"""


# –†–µ—à–µ–Ω–∏–µ ‚Ññ 1
def get_biggest(lst: list) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers"""
    max_num = -1
    if lst:
        max_len = len(str(max(lst)))
        max_num = int(''.join(map(str, sorted(lst, key=lambda x: str(x) * max_len, reverse=True))))
    return max_num


# –†–µ—à–µ–Ω–∏–µ ‚Ññ 2 - bubble —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
# def get_biggest(numbers):
#     if not numbers:
#         return -1
#
#     li = [str(i) for i in numbers]
#     lenght = len(li)
#
#     for i in range(lenght):
#         index = i
#         for j in range(i + 1, lenght):
#             if li[j] + li[index] > li[index] + li[j]:
#                 index = j
#         li[i], li[index] = li[index], li[i]
#
#     return int(''.join(li))

#  –†–µ—à–µ–Ω–∏–µ ‚Ññ 3  - –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ itertools (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
# import itertools


# def get_biggest(lst: list) -> int:
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers"""
#     if lst:
#         per = itertools.permutations(lst)
#         return max([int(''.join(map(str, list(k)))) for k in per])
#     return -1


# —Ç–µ—Å—Ç—ã
print(get_biggest([1, 2, 3]))
print(get_biggest([61, 228, 9, 3, 11]))
print(get_biggest([7, 71, 72]))
print(get_biggest([]))
print(get_biggest([0, 0, 0, 0, 0, 0]))

