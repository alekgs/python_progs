# Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test,
# проживает он в Москве.

# Query result (выборка из таблицы client):
# +-----------+-----------------+---------+----------------+
# | client_id | name_client     | city_id | email          |
# +-----------+-----------------+---------+----------------+
# | 1         | Баранов Павел   | 3       | baranov@test   |
# | 2         | Абрамова Катя   | 1       | abramova@test  |
# | 3         | Семенонов Иван  | 2       | semenov@test   |
# | 4         | Яковлева Галина | 1       | yakovleva@test |
# | 5         | Попов Илья      | 1       | popov@test     |
# +-----------+-----------------+---------+----------------+

INSERT INTO client(name_client, city_id, email)
VALUES ('Попов Илья',
        (
         SELECT
             city_id
         FROM
             city
         WHERE
             name_city = 'Москва'
         ),
        'popov@test');

SELECT * FROM client;

# Создать новый заказ для Попова Ильи.
# Его комментарий для заказа: «Связаться со мной по вопросу доставки».

# Важно! В решении нельзя использоваться VALUES и делать отбор по client_id.

# Query result (выборка из таблицы buy):
# +--------+---------------------------------------+-----------+
# | buy_id | buy_description                       | client_id |
# +--------+---------------------------------------+-----------+
# | 1      | Доставка только вечером               | 1         |
# | 2      | NULL                                  | 3         |
# | 3      | Упаковать каждую книгу по отдельности | 2         |
# | 4      | NULL                                  | 1         |
# | 5      | Связаться со мной по вопросу доставки | 5         |
# +--------+---------------------------------------+-----------+

INSERT
    INTO
        buy (buy_description, client_id)
    SELECT
        'Связаться со мной по вопросу доставки',
         client_id
    FROM
        client
    WHERE
        name_client = 'Попов Илья';

SELECT * FROM buy;


# В таблицу buy_book добавить заказ с номером 5.
# Этот заказ должен содержать книгу Пастернака «Лирика» в количестве двух экземпляров
# и книгу Булгакова «Белая гвардия» в одном экземпляре.
# Для вставки каждой книги используйте отдельный запрос.
# Не забывайте между запросами ставить точку с запятой.

# Query result (выборка из таблицы buy_book):
# +-------------+--------+---------+--------+
# | buy_book_id | buy_id | book_id | amount |
# +-------------+--------+---------+--------+
# | 1           | 1      | 1       | 1      |
# | 2           | 1      | 7       | 2      |
# | 3           | 1      | 4       | 1      |
# | 4           | 2      | 8       | 2      |
# | 5           | 3      | 3       | 2      |
# | 6           | 3      | 2       | 1      |
# | 7           | 3      | 1       | 1      |
# | 8           | 4      | 5       | 1      |
# | 9           | 5      | 8       | 2      |
# | 10          | 5      | 2       | 1      |
# +-------------+--------+---------+--------+

INSERT INTO
    buy_book (buy_id, book_id, amount)
    SELECT 5, book_id, 2
    FROM
        book
        JOIN author USING (author_id)
    WHERE
        title = 'Лирика' AND name_author = 'Пастернак Б.Л.';

INSERT INTO
    buy_book (buy_id, book_id, amount)
    SELECT 5, book_id, 1
    FROM
        book
        JOIN author USING (author_id)
    WHERE
        title = 'Белая гвардия' AND name_author = 'Булгаков М.А.';


SELECT * FROM buy_book;


# Количество тех книг на складе, которые были включены в заказ с номером 5, уменьшить на то количество,
# которое в заказе с номером 5  указано.
# Для изменения количества книг используйте запрос UPDATE.

# Query result (выборка из таблицы book):
# +---------+-----------------------+-----------+----------+--------+--------+
# | book_id | title                 | author_id | genre_id | price  | amount |
# +---------+-----------------------+-----------+----------+--------+--------+
# | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
# | 2       | Белая гвардия         | 1         | 1        | 540.50 | 4      |
# | 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
# | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
# | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
# | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
# | 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
# | 8       | Лирика                | 4         | 2        | 518.99 | 0      |
# +---------+-----------------------+-----------+----------+--------+--------+

UPDATE
    book b
    JOIN buy_book bb ON b.book_id = bb.book_id AND  bb.buy_id = 5
 SET
     b.amount = b.amount - bb.amount;

SELECT * FROM book;



# Создать счет (таблицу buy_pay) на оплату заказа с номером 5, в который включить название книг, их автора,
# цену, количество заказанных книг и стоимость. Последний столбец назвать Стоимость.
# Информацию в таблицу занести в отсортированном по названиям книг виде.

# Для создании таблицы используйте запрос CREATE.

# Связанные шаги
#
#     создание таблицы;
#     соединение таблиц;
#     условие отбора;
#     выборка столбцов и их именование;
#     вычисления в SELECT;
#     сортировка.
#

# Query result (выборка из таблицы buy_pay):
# +---------------+----------------+--------+--------+-----------+
# | title         | name_author    | price  | amount | Стоимость |
# +---------------+----------------+--------+--------+-----------+
# | Белая гвардия | Булгаков М.А.  | 540.50 | 1      | 540.50    |
# | Лирика        | Пастернак Б.Л. | 518.99 | 2      | 1037.98   |
# +---------------+----------------+--------+--------+-----------+
CREATE TABLE
    buy_pay AS
       SELECT
           title, name_author, price, bb.amount, (price * bb.amount) AS Стоимость
       FROM
          book b
          JOIN author USING (author_id)
          JOIN buy_book bb ON b.book_id = bb.book_id AND bb.buy_id = 5
       ORDER BY title;

SELECT * FROM buy_pay;

# Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5.
# Куда включить номер заказа, количество книг в заказе (название столбца Количество)
# и его общую стоимость (название столбца Итого).
# Для решения используйте ОДИН запрос.

# Связанные шаги
#
#     создание таблицы;
#     соединение таблиц;
#     условие отбора;
#     выборка столбцов и их именование;
#     вычисления в SELECT;
#     вычисления для сгруппированных данных.
#
#
# Query result (выборка из таблицы buy_pay):
# +--------+------------+---------+
# | buy_id | Количество | Итого   |
# +--------+------------+---------+
# | 5      | 3          | 1578.48 |
# +--------+------------+---------+

CREATE TABLE
    buy_pay AS
       SELECT
           buy_id,
           SUM(bb.amount) AS Количество,
           SUM(price * bb.amount) AS Итого
       FROM
          buy_book bb
          JOIN book b ON b.book_id = bb.book_id AND bb.buy_id = 5;
       #GROUP BY bb.buy_id;

SELECT * FROM buy_pay;



# В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step,
# которые должен пройти этот # заказ.

# В столбцы date_step_beg и date_step_end всех записей занести Null.

# Query result (выборка из таблицы buy_step):
# +-------------+--------+---------+---------------+---------------+
# | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
# +-------------+--------+---------+---------------+---------------+
# | 1           | 1      | 1       | 2020-02-20    | 2020-02-20    |
# | 2           | 1      | 2       | 2020-02-20    | 2020-02-21    |
# | 3           | 1      | 3       | 2020-02-22    | 2020-03-07    |
# | 4           | 1      | 4       | 2020-03-06    | 2020-03-06    |
# | 5           | 2      | 1       | 2020-02-28    | 2020-02-28    |
# | 6           | 2      | 2       | 2020-02-29    | 2020-03-01    |
# | 7           | 2      | 3       | 2020-03-02    | NULL          |
# | 8           | 2      | 4       | NULL          | NULL          |
# | 9           | 3      | 1       | 2020-03-05    | 2020-03-05    |
# | 10          | 3      | 2       | 2020-03-05    | 2020-03-06    |
# | 11          | 3      | 3       | 2020-03-06    | 2020-03-10    |
# | 12          | 3      | 4       | 2020-03-11    | NULL          |
# | 13          | 4      | 1       | 2020-03-20    | NULL          |
# | 14          | 4      | 2       | NULL          | NULL          |
# | 15          | 4      | 3       | NULL          | NULL          |
# | 16          | 4      | 4       | NULL          | NULL          |
# | 17          | 5      | 1       | NULL          | NULL          |
# | 18          | 5      | 2       | NULL          | NULL          |
# | 19          | 5      | 3       | NULL          | NULL          |
# | 20          | 5      | 4       | NULL          | NULL          |
# +-------------+--------+---------+---------------+---------------+

# Все этапы в таблицу buy_step можно вставить одним запросом,
# для этого используется соединение CROSS JOIN для таблиц buy и step

INSERT INTO
       buy_step (buy_id, step_id)
            SELECT
                buy_id, step_id
            FROM
                buy, step
            WHERE
                buy.buy_id = 5;

SELECT * FROM buy_step;



# В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5.
# Правильнее было бы занести не конкретную, а текущую дату. Это можно сделать с помощью функции Now().
# Но при этом в разные дни будут вставляться разная дата, и задание нельзя будет проверить,
# поэтому вставим дату 12.04.2020.


# Query result (выборка из таблицы buy_step для заказа с номером 5):
# +-------------+--------+---------+---------------+---------------+
# | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
# +-------------+--------+---------+---------------+---------------+
# | 17          | 5      | 1       | 2020-04-12    | NULL          |
# | 18          | 5      | 2       | NULL          | NULL          |
# | 19          | 5      | 3       | NULL          | NULL          |
# | 20          | 5      | 4       | NULL          | NULL          |
# +-------------+--------+---------+---------------+---------------+

UPDATE
    buy_step
SET
    date_step_beg = '2020-04-12'
WHERE
    buy_id = 5 AND step_id = 1;

SELECT * FROM buy_step WHERE buy_id = 5;


# Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020,
# и начать следующий этап («Упаковка»), задав в столбце date_step_beg для этого этапа ту же дату.

# Реализовать два запроса для завершения этапа и начала следующего.
# Они должны быть записаны в общем виде, чтобы его можно было применять для любых этапов,
# изменив только текущий этап. Для примера пусть это будет этап «Оплата»

# В таблицу step все необходимые этапы занесены последовательно.

# Если текущий этап «Оплата», его id 1, то у следующего этапа «Упаковка» id будет на единицу больше, то есть 2.
# Поэтому в условии отбора запроса, который обновляет дату начала следующего этапа,
# можно использовать вложенный запрос, который выбирает id этапа на 1 больше, чем у текущего:

# SELECT step_id + 1
# FROM step
# WHERE name_step = 'Оплата'
#
# Query result (выборка из таблицы buy_step для заказа с номером 5):
# +-------------+--------+---------+---------------+---------------+
# | buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
# +-------------+--------+---------+---------------+---------------+
# | 17          | 5      | 1       | 2020-04-12    | 2020-04-13    |
# | 18          | 5      | 2       | 2020-04-13    | NULL          |
# | 20          | 5      | 4       | NULL          | NULL          |
# +-------------+--------+---------+---------------+---------------+

SET @buy_id = 5;
SET @date_step = '2020-04-13';
SET @step_id = 1;

UPDATE
    buy_step
SET
    date_step_end = @date_step
WHERE
    buy_id = @buy_id AND step_id = @step_id;

UPDATE
    buy_step
SET
    date_step_beg = @date_step
WHERE
    buy_id = @buy_id AND step_id = @step_id + 1;

SELECT * FROM buy_step WHERE buy_id = 5;


# Вывести количество заказов, находящихся в каждом из статусов.
#
# Query result:
# +-----------------+--------------------+
# | name_step       | Количество_заказов |
# +-----------------+--------------------+
# | Доставка        | 1                  |
# | Оплата          | 1                  |
# | Транспортировка | 1                  |
# | Упаковка        | 0                  |
# +-----------------+--------------------+

SELECT
    name_step,
    COUNT(date_step_beg) AS Количество_заказов
FROM
    step
    LEFT JOIN (
                SELECT *
                FROM
                    buy_step
                WHERE
                    date_step_beg AND date_step_end IS Null
              ) temp_table USING (step_id)
GROUP BY
    name_step
ORDER BY
    Количество_заказов DESC,
    name_step;


# С 1 января Мухосранский областной суд признал творчество Булгакова экстремистским, поскольку оно
# оскорбляло чувство верующих, содержало сцены насилия и акты неповиновения органам государственной  власти.
# В книжный магазин ФСБ отправило запрос, с требованием передать список людей, которые заказывали
# экстремистскую литературу.
#
# Директор магазина обращает внимание, что книги Булгакова на складе ещё остались, а сжигать неохота.
# Поэтому решает не сдавать клиентов, в надежде, что они станут региональными, тайными дистрибьютерами Булгакова.
# В тоже время злить ФСБ директор магазина не хочет и попросил вас подготовить шифрованную версию
# клиентского списка, такую, чтоб ФСБ не отдеанонило, а директор на всякий случай сохранил каналы сбыта.
# Итак директор дал вам задание:
# 1. Исправить фамилии клиентов, которые заказывали Булгакова, так что если указанного автора заказал Иванов,
# его фамилия отразилась бы как Бул-Иванов.
# 2. В таблицу genre добавить новый жанр - "Экстремизм".
# 3. Везде, где автор "Булгаков"  поменять жанр на "Экстремизм" и поднять цену в 10 раз из-за возросшего спроса.
#
# Таблица клиент должна принять вид:
# +-----------+-------------------+---------+----------------+
# | client_id | name_client       | city_id | email          |
# +-----------+-------------------+---------+----------------+
# | 1         | Бул-Баранов Павел | 3       | baranov@test   |
# | 2         | Бул-Абрамова Катя | 1       | abramova@test  |
# | 3         | Семенонов Иван    | 2       | semenov@test   |
# | 4         | Яковлева Галина   | 1       | yakovleva@test |
# +-----------+-------------------+---------+----------------+
#
# Таблица жанр:
#
# ----------+-------------+
# | genre_id | name_genre  |
# +----------+-------------+
# | 1        | Роман       |
# | 2        | Поэзия      |
# | 3        | Приключения |
# | 4        | Экстремизм  |
# +----------+-------------+
#
# Слитая таблица Select book.title, author.name_author, genre.name_genre, book.price:
# +-----------------------+------------------+------------+---------+
# | title                 | name_author      | name_genre | price   |
# +-----------------------+------------------+------------+---------+
# | Мастер и Маргарита    | Булгаков М.А.    | Экстремизм | 6709.90 |
# | Белая гвардия         | Булгаков М.А.    | Экстремизм | 5405.00 |
# | Идиот                 | Достоевский Ф.М. | Роман      | 460.00  |
# | Братья Карамазовы     | Достоевский Ф.М. | Роман      | 799.01  |
# | Игрок                 | Достоевский Ф.М. | Роман      | 480.50  |
# | Стихотворения и поэмы | Есенин С.А.      | Поэзия     | 650.00  |
# | Черный человек        | Есенин С.А.      | Поэзия     | 570.20  |
# | Лирика                | Пастернак Б.Л.   | Поэзия     | 518.99  |
# +-----------------------+------------------+------------+---------+

INSERT INTO genre (name_genre) VALUES ('Экстремизм');

UPDATE book b
        JOIN author a ON (a.author_id = b.author_id AND a.name_author = 'Булгаков М.А.')
        JOIN buy_book bb USING(book_id)
        JOIN buy USING(buy_id)
        JOIN client USING(client_id)
SET b.price = b.price * 10,
    b.genre_id = (SELECT ge.genre_id FROM genre ge WHERE ge.name_genre = 'Экстремизм'),
    name_client = concat('Бул-', name_client);

SELECT
    title,
    name_author,
    name_genre,
    price,
    amount
  FROM book
           JOIN author USING (author_id)
           JOIN genre USING (genre_id);

